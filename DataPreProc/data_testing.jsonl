{"testCode":"package com.example.util;\n\nimport com.example.model.ToDo;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class PayloadValidatorTest {\n\n    @Test\n    public void validatePayLoad() {\n        ToDo toDo = new ToDo(1, \"Sample ToDo 1\", true);\n        assertEquals(false, PayloadValidator.validateCreatePayload(toDo));\n    }\n\n    @Test\n    public void validateInvalidPayLoad() {\n        ToDo toDo = new ToDo(0, \"Sample ToDo 1\", true);\n        assertEquals(true, PayloadValidator.validateCreatePayload(toDo));\n    }\n\n\n}\n","sourceCode":"package com.example.util;\n\nimport com.example.model.ToDo;\n\npublic class PayloadValidator {\n\n    public static boolean validateCreatePayload(ToDo toDo) {\n        return toDo.getId() <= 0;\n    }\n\n}\n"}
{"testCode":"package com.example;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n}\n","sourceCode":"package com.example;\n\nimport com.example.model.ToDo;\nimport com.example.repository.ToDoRepository;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n    private static final Logger logger = LoggerFactory.getLogger(DemoApplication.class);\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n\n    @Bean\n    public CommandLineRunner setup(ToDoRepository toDoRepository) {\n        return (args) -> {\n            toDoRepository.save(new ToDo(\"Remove unused imports\", true));\n            toDoRepository.save(new ToDo(\"Clean the code\", true));\n            toDoRepository.save(new ToDo(\"Build the artifacts\", false));\n            toDoRepository.save(new ToDo(\"Deploy the jar file\", true));\n            logger.info(\"The sample data has been generated\");\n        };\n    }\n}\n"}
{"testCode":"package com.example.web;\n\nimport com.example.DemoApplication;\nimport org.junit.Before;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.MethodSorters;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport static org.hamcrest.collection.IsCollectionWithSize.hasSize;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = DemoApplication.class)\n@SpringBootTest\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class ToDoControllerTest {\n\n    private MockMvc mockMvc;\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    @Before\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();\n\n    }\n\n    @Test\n    public void verifyAllToDoList() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"\/todo\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$\", hasSize(4))).andDo(print());\n    }\n\n    @Test\n    public void verifyToDoById() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"\/todo\/3\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.id\").exists())\n                .andExpect(jsonPath(\"$.text\").exists())\n                .andExpect(jsonPath(\"$.completed\").exists())\n                .andExpect(jsonPath(\"$.id\").value(3))\n                .andExpect(jsonPath(\"$.text\").value(\"Build the artifacts\"))\n                .andExpect(jsonPath(\"$.completed\").value(false))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyInvalidToDoArgument() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"\/todo\/f\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.errorCode\").value(400))\n                .andExpect(jsonPath(\"$.message\").value(\"The request could not be understood by the server due to malformed syntax.\"))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyInvalidToDoId() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"\/todo\/0\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.errorCode\").value(404))\n                .andExpect(jsonPath(\"$.message\").value(\"ToDo doesn\u00c2\u00b4t exist\"))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyNullToDo() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.get(\"\/todo\/6\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.errorCode\").value(404))\n                .andExpect(jsonPath(\"$.message\").value(\"ToDo doesn\u00c2\u00b4t exist\"))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyDeleteToDo() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.delete(\"\/todo\/4\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.status\").value(200))\n                .andExpect(jsonPath(\"$.message\").value(\"ToDo has been deleted\"))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyInvalidToDoIdToDelete() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.delete(\"\/todo\/9\").accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.errorCode\").value(404))\n                .andExpect(jsonPath(\"$.message\").value(\"ToDo to delete doesn\u00c2\u00b4t exist\"))\n                .andDo(print());\n    }\n\n\n    @Test\n    public void verifySaveToDo() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"\/todo\/\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(\"{\\\"text\\\" : \\\"New ToDo Sample\\\", \\\"completed\\\" : \\\"false\\\" }\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.id\").exists())\n                .andExpect(jsonPath(\"$.text\").exists())\n                .andExpect(jsonPath(\"$.completed\").exists())\n                .andExpect(jsonPath(\"$.text\").value(\"New ToDo Sample\"))\n                .andExpect(jsonPath(\"$.completed\").value(false))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyMalformedSaveToDo() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"\/todo\/\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(\"{ \\\"id\\\": \\\"8\\\", \\\"text\\\" : \\\"New ToDo Sample\\\", \\\"completed\\\" : \\\"false\\\" }\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.errorCode\").value(404))\n                .andExpect(jsonPath(\"$.message\").value(\"Payload malformed, id must not be defined\"))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyUpdateToDo() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.patch(\"\/todo\/\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(\"{ \\\"id\\\": \\\"1\\\", \\\"text\\\" : \\\"New ToDo Text\\\", \\\"completed\\\" : \\\"false\\\" }\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.id\").exists())\n                .andExpect(jsonPath(\"$.text\").exists())\n                .andExpect(jsonPath(\"$.completed\").exists())\n                .andExpect(jsonPath(\"$.id\").value(1))\n                .andExpect(jsonPath(\"$.text\").value(\"New ToDo Text\"))\n                .andExpect(jsonPath(\"$.completed\").value(false))\n                .andDo(print());\n    }\n\n    @Test\n    public void verifyInvalidToDoUpdate() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.patch(\"\/todo\/\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .content(\"{ \\\"idd\\\": \\\"8\\\", \\\"text\\\" : \\\"New ToDo Sample\\\", \\\"completed\\\" : \\\"false\\\" }\")\n                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(jsonPath(\"$.errorCode\").value(404))\n                .andExpect(jsonPath(\"$.message\").value(\"ToDo to update doesn\u00c2\u00b4t exist\"))\n                .andDo(print());\n    }\n\n}\n","sourceCode":"package com.example.web;\n\nimport com.example.exception.ToDoException;\nimport com.example.model.Response;\nimport com.example.model.ToDo;\nimport com.example.service.ToDoService;\nimport com.example.util.PayloadValidator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@RestController\npublic class ToDoController {\n\n    private static final Logger logger = LoggerFactory.getLogger(ToDoController.class);\n\n    @Autowired\n    private ToDoService toDoService;\n\n    @RequestMapping(value = \"\/todo\", method = RequestMethod.GET)\n    public ResponseEntity<List<ToDo>> getAllToDo() {\n        logger.info(\"Returning all the ToDo\u00c2\u00b4s\");\n        return new ResponseEntity<List<ToDo>>(toDoService.getAllToDo(), HttpStatus.OK);\n    }\n\n    @RequestMapping(value = \"\/todo\/{id}\", method = RequestMethod.GET)\n    public ResponseEntity<ToDo> getToDoById(@PathVariable(\"id\") long id) throws ToDoException {\n        logger.info(\"ToDo id to return \" + id);\n        Optional<ToDo> toDoOpt = toDoService.getToDoById(id);\n        ToDo toDo = toDoOpt.get();\n        if (!toDoOpt.isPresent()) {\n            throw new ToDoException(\"ToDo doesn\u00c2\u00b4t exist\");\n        }\n        return new ResponseEntity<ToDo>(toDo, HttpStatus.OK);\n    }\n\n    @RequestMapping(value = \"\/todo\/{id}\", method = RequestMethod.DELETE)\n    public ResponseEntity<Response> removeToDoById(@PathVariable(\"id\") long id) throws ToDoException {\n        logger.info(\"ToDo id to remove \" + id);\n        Optional<ToDo> toDoOpt = toDoService.getToDoById(id);\n        ToDo toDo = toDoOpt.get();\n        if (!toDoOpt.isPresent()) {\n            throw new ToDoException(\"ToDo to delete doesn\u00c2\u00b4t exist\");\n        }\n        toDoService.removeToDo(toDo);\n        return new ResponseEntity<Response>(new Response(HttpStatus.OK.value(), \"ToDo has been deleted\"), HttpStatus.OK);\n    }\n\n    @RequestMapping(value = \"\/todo\", method = RequestMethod.POST)\n    public ResponseEntity<ToDo> saveToDo(@RequestBody ToDo payload) throws ToDoException {\n        logger.info(\"Payload to save \" + payload);\n        if (!PayloadValidator.validateCreatePayload(payload)) {\n            throw new ToDoException(\"Payload malformed, id must not be defined\");\n        }\n        return new ResponseEntity<ToDo>(toDoService.saveToDo(payload), HttpStatus.OK);\n    }\n\n    @RequestMapping(value = \"\/todo\", method = RequestMethod.PATCH)\n    public ResponseEntity<ToDo> updateToDo(@RequestBody ToDo payload) throws ToDoException {\n        logger.info(\"Payload to update \" + payload);\n        Optional<ToDo> toDoOpt = toDoService.getToDoById(payload.getId());\n        ToDo toDo = toDoOpt.get();\n        if (!toDoOpt.isPresent()) {\n            throw new ToDoException(\"ToDo to update doesn\u00c2\u00b4t exist\");\n        }\n        return new ResponseEntity<ToDo>(toDoService.saveToDo(payload), HttpStatus.OK);\n    }\n\n}\n"}
{"testCode":"package com.example.service;\n\nimport com.example.model.ToDo;\nimport com.example.repository.ToDoRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class ToDoServiceTest {\n\n    @Mock\n    private ToDoRepository toDoRepository;\n\n    @InjectMocks\n    private ToDoServiceImpl toDoService;\n\n    @Before\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testGetAllToDo() {\n        List<ToDo> toDoList = new ArrayList<ToDo>();\n        toDoList.add(new ToDo(1, \"Todo Sample 1\", true));\n        toDoList.add(new ToDo(2, \"Todo Sample 2\", true));\n        toDoList.add(new ToDo(3, \"Todo Sample 3\", false));\n        when(toDoRepository.findAll()).thenReturn(toDoList);\n\n        List<ToDo> result = toDoService.getAllToDo();\n        assertEquals(3, result.size());\n    }\n\n    @Test\n    public void testGetToDoById() {\n        ToDo toDo = new ToDo(1, \"Todo Sample 1\", true);\n        when(toDoRepository.findById(1L)).thenReturn(Optional.of(toDo));\n        Optional<ToDo> resultOpt = toDoService.getToDoById(1);\n        ToDo result = resultOpt.get();\n        assertEquals(1, result.getId());\n        assertEquals(\"Todo Sample 1\", result.getText());\n        assertEquals(true, result.isCompleted());\n    }\n\n    @Test\n    public void saveToDo() {\n        ToDo toDo = new ToDo(8, \"Todo Sample 8\", true);\n        when(toDoRepository.save(toDo)).thenReturn(toDo);\n        ToDo result = toDoService.saveToDo(toDo);\n        assertEquals(8, result.getId());\n        assertEquals(\"Todo Sample 8\", result.getText());\n        assertEquals(true, result.isCompleted());\n    }\n\n    @Test\n    public void removeToDo() {\n        ToDo toDo = new ToDo(8, \"Todo Sample 8\", true);\n        toDoService.removeToDo(toDo);\n        verify(toDoRepository, times(1)).delete(toDo);\n    }\n\n\n}\n\n","sourceCode":"package com.example.service;\n\nimport com.example.model.ToDo;\n\nimport java.util.List;\nimport java.util.Optional;\n\npublic interface ToDoService {\n    List<ToDo> getAllToDo();\n\n    Optional<ToDo> getToDoById(long id);\n\n    ToDo saveToDo(ToDo todo);\n\n    void removeToDo(ToDo todo);\n}\n"}
{"testCode":"package com.practicalunittesting.chp03.money;\n\nimport junitparams.JUnitParamsRunner;\nimport junitparams.Parameters;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static junitparams.JUnitParamsRunner.$;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\n@RunWith(JUnitParamsRunner.class)\npublic class MoneyIAETest {\n\n\tprivate final static int VALID_AMOUNT = 5;\n\tprivate final static String VALID_CURRENCY = \"USD\";\n\n\tprivate static final Object[] getInvalidAmount() {\n\t\treturn $(-12387, -5, -1);\n\t}\n\n\t@Test(expected = IllegalArgumentException.class)\n\t@Parameters(method = \"getInvalidAmount\")\n\tpublic void constructorShouldThrowIAEForInvalidAmount(int invalidAmount) {\n\t\tnew Money(invalidAmount, VALID_CURRENCY);\n\t}\n\n\tprivate static final Object[] getInvalidCurrency() {\n\t\treturn new String[][]{{null}, {\"\"}};\n\t\t\/\/ does not work with $(null, \"\"); - maybe fixed in newer JUnitParams\n\t}\n\n\t@Test(expected = IllegalArgumentException.class)\n\t@Parameters(method = \"getInvalidCurrency\")\n\tpublic void constructorShouldThrowIAEForInvalidCurrency(String invalidCurrency) {\n\t\tnew Money(VALID_AMOUNT, invalidCurrency);\n\t}\n}\n","sourceCode":"package com.practicalunittesting.chp03.money;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\npublic class Money {\n\tprivate final int amount;\n\tprivate final String currency;\n\n\tpublic Money(int amount, String currency) {\n\t\tif (amount < 0) {\n\t\t\tthrow new IllegalArgumentException(\"illegal amount: [\" + amount + \"]\");\n\t\t}\n\t\tif (currency == null || currency.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"illegal currency: [\" + currency + \"]\");\n\t\t}\n\t\t\/\/this.amount = 15;\n\t\tthis.amount = amount;\n\t\tthis.currency = currency;\n\t}\n\n\tpublic int getAmount() {\n\t\treturn amount;\n\t}\n\n\tpublic String getCurrency() {\n\t\treturn currency;\n\t}\n\n\tpublic boolean equals(Object anObject) {\n\t\tif (anObject instanceof Money) {\n\t\t\tMoney money = (Money) anObject;\n\t\t\treturn money.getCurrency().equals(getCurrency())\n\t\t\t\t\t&& getAmount() == money.getAmount();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic Money add(Money b) {\n\t\t\/\/ FIXME obviously flawed\n\t\treturn new Money(this.amount + b.amount, this.currency);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Money{\" +\n\t\t\t\t\"amount=\" + amount +\n\t\t\t\t\", currency='\" + currency + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n"}
{"testCode":"package com.practicalunittesting.chp03.money;\n\nimport junitparams.JUnitParamsRunner;\nimport junitparams.Parameters;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static junitparams.JUnitParamsRunner.$;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\n@RunWith(JUnitParamsRunner.class)\npublic class MoneyTest {\n\n\t@Test\n\tpublic void constructorShouldSetAmountAndCurrency() {\n\t\tMoney money = new Money(10, \"USD\");\n\t\t\/\/Assert.assertEquals(10, money.getAmount());\n\t\t\/\/assertEquals(15, money.getAmount());\n\t\tAssert.assertEquals(\"wrong amount of money\", 10, money.getAmount());\n\t\tAssert.assertEquals(\"USD\", money.getCurrency());\n\t}\n\n\tprivate Object[] getMoney() {\n\t\treturn $(\n\t\t\t\t$(new Money(4, \"USD\"), new Money(3, \"USD\"), 7),\n\t\t\t\t$(new Money(1, \"EUR\"), new Money(4, \"EUR\"), 5),\n\t\t\t\t$(new Money(1234, \"CHF\"), new Money(234, \"CHF\"), 1468)\n\t\t);\n\t}\n\n\t@Test\n\t@Parameters(method = \"getMoney\")\n\tpublic void shouldAddSameCurrencies(Money a, Money b,\n\t\t\t\t\t\t\t\t\t\tint expectedResult) {\n\t\tMoney result = a.add(b);\n\t\tAssert.assertEquals(expectedResult, result.getAmount());\n\t}\n\n}\n","sourceCode":"package com.practicalunittesting.chp03.money;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\npublic class Money {\n\tprivate final int amount;\n\tprivate final String currency;\n\n\tpublic Money(int amount, String currency) {\n\t\tif (amount < 0) {\n\t\t\tthrow new IllegalArgumentException(\"illegal amount: [\" + amount + \"]\");\n\t\t}\n\t\tif (currency == null || currency.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"illegal currency: [\" + currency + \"]\");\n\t\t}\n\t\t\/\/this.amount = 15;\n\t\tthis.amount = amount;\n\t\tthis.currency = currency;\n\t}\n\n\tpublic int getAmount() {\n\t\treturn amount;\n\t}\n\n\tpublic String getCurrency() {\n\t\treturn currency;\n\t}\n\n\tpublic boolean equals(Object anObject) {\n\t\tif (anObject instanceof Money) {\n\t\t\tMoney money = (Money) anObject;\n\t\t\treturn money.getCurrency().equals(getCurrency())\n\t\t\t\t\t&& getAmount() == money.getAmount();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic Money add(Money b) {\n\t\t\/\/ FIXME obviously flawed\n\t\treturn new Money(this.amount + b.amount, this.currency);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Money{\" +\n\t\t\t\t\"amount=\" + amount +\n\t\t\t\t\", currency='\" + currency + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n"}
{"testCode":"package com.practicalunittesting.chp03.money;\n\nimport junitparams.JUnitParamsRunner;\nimport junitparams.Parameters;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static junitparams.JUnitParamsRunner.$;\nimport static org.junit.Assert.assertEquals;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\n@RunWith(JUnitParamsRunner.class)\npublic class MoneyParameterizedTest {\n\n\tprivate static final Object[] getMoney() {\n\t\treturn $(\n\t\t\t\t$(10, \"USD\"),\n\t\t\t\t$(20, \"EUR\")\n\t\t);\n\t}\n\n\t@Test\n\t@Parameters(method = \"getMoney\")\n\tpublic void constructorShouldSetAmountAndCurrency(\n\t\t\tint amount, String currency) {\n\t\tMoney money = new Money(amount, currency);\n\t\tassertEquals(amount, money.getAmount());\n\t\tassertEquals(currency, money.getCurrency());\n\t}\n\n\tprivate static final Object[] getMoneyWithoutDollarSignMethod() {\n\t\treturn new Object[]{\n\t\t\t\tnew Object[]{10, \"USD\"},\n\t\t\t\tnew Object[]{20, \"EUR\"}\n\t\t};\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","sourceCode":"package com.practicalunittesting.chp03.money;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\npublic class Money {\n\tprivate final int amount;\n\tprivate final String currency;\n\n\tpublic Money(int amount, String currency) {\n\t\tif (amount < 0) {\n\t\t\tthrow new IllegalArgumentException(\"illegal amount: [\" + amount + \"]\");\n\t\t}\n\t\tif (currency == null || currency.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"illegal currency: [\" + currency + \"]\");\n\t\t}\n\t\t\/\/this.amount = 15;\n\t\tthis.amount = amount;\n\t\tthis.currency = currency;\n\t}\n\n\tpublic int getAmount() {\n\t\treturn amount;\n\t}\n\n\tpublic String getCurrency() {\n\t\treturn currency;\n\t}\n\n\tpublic boolean equals(Object anObject) {\n\t\tif (anObject instanceof Money) {\n\t\t\tMoney money = (Money) anObject;\n\t\t\treturn money.getCurrency().equals(getCurrency())\n\t\t\t\t\t&& getAmount() == money.getAmount();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic Money add(Money b) {\n\t\t\/\/ FIXME obviously flawed\n\t\treturn new Money(this.amount + b.amount, this.currency);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Money{\" +\n\t\t\t\t\"amount=\" + amount +\n\t\t\t\t\", currency='\" + currency + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n"}
{"testCode":"package com.practicalunittesting.chp03.money;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\npublic class MoneyManyValuesTest {\n\n\t@Test\n\tpublic void testConstructor() {\n\t\tMoney money = new Money(10, \"USD\");\n\t\tAssert.assertEquals(10, money.getAmount());\n\t\tAssert.assertEquals(\"USD\", money.getCurrency());\n\t\tmoney = new Money(20, \"EUR\");\n\t\tAssert.assertEquals(20, money.getAmount());\n\t\tAssert.assertEquals(\"EUR\", money.getCurrency());\n\t}\n\n}\n","sourceCode":"package com.practicalunittesting.chp03.money;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\npublic class Money {\n\tprivate final int amount;\n\tprivate final String currency;\n\n\tpublic Money(int amount, String currency) {\n\t\tif (amount < 0) {\n\t\t\tthrow new IllegalArgumentException(\"illegal amount: [\" + amount + \"]\");\n\t\t}\n\t\tif (currency == null || currency.isEmpty()) {\n\t\t\tthrow new IllegalArgumentException(\"illegal currency: [\" + currency + \"]\");\n\t\t}\n\t\t\/\/this.amount = 15;\n\t\tthis.amount = amount;\n\t\tthis.currency = currency;\n\t}\n\n\tpublic int getAmount() {\n\t\treturn amount;\n\t}\n\n\tpublic String getCurrency() {\n\t\treturn currency;\n\t}\n\n\tpublic boolean equals(Object anObject) {\n\t\tif (anObject instanceof Money) {\n\t\t\tMoney money = (Money) anObject;\n\t\t\treturn money.getCurrency().equals(getCurrency())\n\t\t\t\t\t&& getAmount() == money.getAmount();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic Money add(Money b) {\n\t\t\/\/ FIXME obviously flawed\n\t\treturn new Money(this.amount + b.amount, this.currency);\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Money{\" +\n\t\t\t\t\"amount=\" + amount +\n\t\t\t\t\", currency='\" + currency + '\\'' +\n\t\t\t\t'}';\n\t}\n}\n"}
{"testCode":"package com.practicalunittesting.chp04.footballteam;\n\nimport junitparams.JUnitParamsRunner;\nimport junitparams.Parameters;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static junitparams.JUnitParamsRunner.$;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\n\n@RunWith(JUnitParamsRunner.class)\npublic class FootballTeamTest {\n\n\tprivate static final int ANY_NUMBER = 123;\n\n\tpublic Object[] nbOfGamesWon() {\n\t\treturn $(0, 1, 2);\n\t}\n\n\t@Test\n\t@Parameters(method = \"nbOfGamesWon\")\n\tpublic void constructorShouldSetGamesWon(int nbOfGamesWon) {\n\t\tFootballTeam team = new FootballTeam(nbOfGamesWon);\n\t\t\/\/assertEquals(nbOfGamesWon, team.getGamesWon(), 3);\n\t\tassertEquals(nbOfGamesWon + \" games passed to constructor, \" +\n\t\t\t\t\"but \" + team.getGamesWon() + \" were returned\",\n\t\t\t\tnbOfGamesWon, team.getGamesWon());\n\t}\n\n\tpublic Object[] illegalNbOfGamesWon() {\n\t\treturn $(-10, -1);\n\t}\n\n\t@Test(expected = IllegalArgumentException.class)\n\t@Parameters(method = \"illegalNbOfGamesWon\")\n\tpublic void constructorShouldThrowExceptionForIllegalGamesNb(int illegalNbOfGames) {\n\t\tnew FootballTeam(illegalNbOfGames);\n\t}\n\n\t@Test\n\tpublic void shouldBePossibleToCompareTeams() {\n\t\tFootballTeam team = new FootballTeam(ANY_NUMBER);\n\t\tassertTrue(\"Should be possible to compare teams\", team instanceof Comparable);\n\t}\n\n\t@Test\n\tpublic void teamWithMoreMatchesWonShouldBeGreater() {\n\t\tFootballTeam team_2 = new FootballTeam(2);\n\t\tFootballTeam team_3 = new FootballTeam(3);\n\t\t\/\/assertTrue(team_3.compareTo(team_2) > 0);\n\t\tassertTrue(\"team with \" + team_3.getGamesWon() + \" games won should be ranked before \" +\n\t\t\t\t\"team with \" + team_2.getGamesWon() + \" games won\",\n\t\t\t\tteam_3.compareTo(team_2) > 0);\n\t}\n\n\t@Test\n\tpublic void teamsWithLessMatchesWonShouldBeLesser() {\n\t\tFootballTeam team_2 = new FootballTeam(2);\n\t\tFootballTeam team_3 = new FootballTeam(3);\n\t\t\/\/assertTrue(team_3.compareTo(team_2) > 0);\n\t\tassertTrue(\"team with \" + team_2.getGamesWon() + \" games won should be ranked after \" +\n\t\t\t\t\"team with \" + team_3.getGamesWon() + \" games won\",\n\t\t\t\tteam_2.compareTo(team_3) < 0);\n\t}\n\n\t@Test\n\tpublic void teamsWithSameNumberOfMatchesWonShouldBeEqual() {\n\t\tFootballTeam teamA = new FootballTeam(2);\n\t\tFootballTeam teamB = new FootballTeam(2);\n\t\t\/\/assertTrue(team_3.compareTo(team_2) > 0);\n\t\tassertTrue(\"both teams have won the same number of games: \" +\n\t\t\t\t\"\" + teamA.getGamesWon() + \" vs. \" + teamB.getGamesWon() + \" and should be ranked equal\",\n\t\t\t\tteamA.compareTo(teamB) == 0);\n\t}\n}\n","sourceCode":"package com.practicalunittesting.chp04.footballteam;\n\n\/**\n * Practical Unit Testing with JUnit and Mockito - source code for examples.\n * Visit http:\/\/practicalunittesting.com for more information.\n *\n * @author Tomek Kaczanowski\n *\/\npublic class FootballTeam implements Comparable<FootballTeam> {\n\tprivate int gamesWon;\n\n\tpublic FootballTeam(int gamesWon) {\n\t\tif (gamesWon < 0) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Not possible to have less than 0 games won! (was + \" + gamesWon + \")\");\n\t\t}\n\t\tthis.gamesWon = gamesWon;\n\t}\n\n\tpublic int getGamesWon() {\n\t\treturn gamesWon;\n\t}\n\n\t@Override\n\tpublic int compareTo(FootballTeam otherTeam) {\n\t\treturn gamesWon - otherTeam.getGamesWon();\n\t}\n}\n"}
{"testCode":"package com.github.stokito.unitTestExample.calculator;\n\nimport junit.framework.Assert;\nimport org.junit.Test;\n\npublic class CalculatorTest {\n\n\t@Test\n\tpublic void testSum() {\n\t\t\/\/ Given\n\t\tCalculator calculator = new Calculator();\n\t\t\/\/ When\n\t\tint result = calculator.sum(2, 2);\n\t\t\/\/ Then\n\t\tif (result != 4) {   \/\/ if 2 + 2 != 4\n\t\t\tAssert.fail();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testMinus() {\n\t\tCalculator calculator = new Calculator();\n\t\tAssert.assertEquals(0, calculator.minus(2, 2));\n\t}\n\n\t@Test\n\tpublic void testDivide() {\n\t\tCalculator calculator = new Calculator();\n\t\tAssert.assertEquals(2, calculator.divide(6, 3));\n\t}\n\n\t@Test(expected = ArithmeticException.class)\n\tpublic void testDivideWillThrowExceptionWhenDivideOnZero() {\n\t\tCalculator calculator = new Calculator();\n\t\tcalculator.divide(6, 0);\n\t}\n}\n","sourceCode":"package com.github.stokito.unitTestExample.calculator;\n\npublic class Calculator {\n\n\tpublic int sum(int a, int b) {\n\t\treturn a + b;\n\t}\n\n\tpublic int minus(int a, int b) {\n\t\treturn a + b;  \/\/ ERROR!!!\n\t}\n\n\tpublic int divide(int a, int b) {\n\t\treturn a \/ b;\n\t}\n\n\tpublic int multiply(int a, int b) {\n\t\treturn a * b;\n\t}\n\n}\n"}
